head	1.3;
access;
symbols;
locks
	robert:1.3; strict;
comment	@// @;


1.3
date	94.10.06.20.13.29;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	94.07.18.22.51.15;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	94.07.11.18.39.50;	author robert;	state Exp;
branches;
next	;


desc
@Class encapsulating the torus attractor mapping function.
@


1.3
log
@optionally perform modulo function on mapping.
add facilities for computing output ranges from input ranges.
@
text
@//
//  define an ADT that implements the torus attractor mapping
//

#include <TorusAttractor.h>
#include "math.h"
#include <stdio.h>

#define PI2 	(2 * 3.14159265358979323)

static double defaultA1[NUM_COEFFS] = { -0.26813663648754, -0.91067559396390,
		       0.31172026382793, -0.04003977835470 };

static double defaultA2[NUM_COEFFS] = { 0.08818611671542, -0.56502889980448,
		      0.16299548727086, -0.80398881978155 };

static double defaultB1[NUM_COEFFS] = { 0.98546084298505, 0.50446045609351,
		      0.94707472523078, 0.23350105508507 };

static double defaultB2[NUM_COEFFS] = { 0.99030722865609, 0.33630697012268,
		      0.29804921230971, 0.15506467277737 };

static double defaultR[NUM_COEFFS] = {1, 0, 1, 1};
static double defaultS[NUM_COEFFS] = {0, 1, 1, -1};

static double defaultOmega1 = 0.48566516831488;
static double defaultOmega2 = 0.90519373301868;
static double defaultEpsilon = 0.5;

TorusAttractor::TorusAttractor( int _xCellRes, int _yCellRes )
{
    xCellRes = _xCellRes;
    yCellRes = _yCellRes;
    p1Array = NULL;
    p2Array = NULL;
    wrapMapping = 1;

    resetParameters();
}

TorusAttractor::~TorusAttractor() {}


/******************************************************************************
Mapping of a point (theta,psi) from the torus onto the torus.

F(theta,psi) = (theta + omega1 + epsilon * P1, psi + omega2 + epsilon * P2)
where P1 and P2 are "random" functions of theta and psi.  The system becomes
less predictable as epsilon increases.
******************************************************************************/
void	
TorusAttractor::mapPoint( double theta, double psi, 
		  double *newTheta, double *newPsi )
{
  double t,p;
  double p1,p2;

  p1 = p1Array[int(theta*xCellRes)+xCellRes*int(psi*yCellRes)];
  p2 = p2Array[int(theta*xCellRes)+xCellRes*int(psi*yCellRes)];

  t = theta + omega1 + epsilon * p1 / PI2;
  p = psi   + omega2 + epsilon * p2 / PI2;

  /* compute mod 1 of the resulting values to keep them on the torus */

  if( wrapMapping ) {
      t = t - floor (t);
      if (t < 0)
	t += 1;

      p = p - floor (p);
      if (p < 0)
	p += 1;
  }

  *newTheta = t;
  *newPsi = p;
}


void
TorusAttractor::allocateP1P2Arrays()
{
    if( p1Array == NULL || p2Array == NULL ) {
	p1Array = new float[xCellRes*yCellRes];
	p2Array = new float[xCellRes*yCellRes];
    }
}


void
TorusAttractor::computeP1P2Arrays()
{
    allocateP1P2Arrays();
    for( int y=0; y<yCellRes; y++ ) {
	float	psi = float(y + 0.5)/yCellRes;
	for( int x=0; x<xCellRes; x++ ) {
	    float	theta = float(x + 0.5)/xCellRes;
	    double	p1 = 0.0;
	    double	p2 = 0.0;
	    for ( int i = 0; i < NUM_COEFFS; i++) {
		p1 += a1[i] * sin (PI2 * (r[i] * theta + s[i] * psi + b1[i]));
		p2 += a2[i] * sin (PI2 * (r[i] * theta + s[i] * psi + b2[i]));
	    }
	    p1Array[int(theta*xCellRes)+xCellRes*int(psi*yCellRes)] = p1;
	    p2Array[int(theta*xCellRes)+xCellRes*int(psi*yCellRes)] = p2;
	}
    }
}


//
//  this works for theta or psi
    //
    //  the equations we are computing the range for are:
    //	  t = theta + omega1 + epsilon * p1 / PI2;
    //	  p = psi   + omega2 + epsilon * p2 / PI2;
    //
    //  assume that theta has its input range set;
    //
//
void
TorusAttractor::computeRange( const Interval &omega, const Interval &eps, 
			const Interval &param, Interval &theta )
{
    Interval	x = eps;
    x *= param;
    x /= PI2;
    x += omega;
    theta += theta;
}

//
//  
//
void
TorusAttractor::computeRanges( int N, const Interval &om1, const Interval &om2,
		    const Interval &eps, Interval &theta, Interval &psi )
{
    Interval	p1( p1Array[0], p1Array[0] );
    Interval	p2( p2Array[0], p2Array[0] );
    
    for( int i=0; i<xCellRes*yCellRes; i++ ) {
	p1.setMin( p1Array[i] );
	p1.setMax( p1Array[i] );
	p2.setMin( p2Array[i] );
	p2.setMax( p2Array[i] );
    }

    for( i=0; i<N; i++ ) {
	computeRange( om1, eps, p1, theta );
	computeRange( om2, eps, p2, psi );
    }
}

void	
TorusAttractor::setOmega1( double newOmega1 )
{
    omega1 = newOmega1;
}

void	
TorusAttractor::setOmega2( double newOmega2 )
{
    omega2 = newOmega2;
}

void	
TorusAttractor::setEpsilon( double newEpsilon )
{
    epsilon = newEpsilon;
}

/******************************************************************************
Pick new random coefficients for the functions P1 and P2.  See map().
******************************************************************************/
void	
TorusAttractor::randomizeArrays()
{
  int i;

  /* a1 and a2 coefficients could actually be larger since they are */
  /* used as amplitudes of sine waves in computing P1 and P2 */

  /* the values of b1 and b2 are effectively mapped into [0,1] by */
  /* the multiplication by 2*pi in computing P1 and P2, so there */
  /* is nothing to be gained by expanding their range */

  for (i = 0; i < NUM_COEFFS; i++) {
    a1[i] = frand (-1.0, 1.0);
    a2[i] = frand (-1.0, 1.0);
    b1[i] = frand (0.0, 1.0);
    b2[i] = frand (0.0, 1.0);
  }
    computeP1P2Arrays();
}



// resets omegas, epsilon and arrays
void	
TorusAttractor::resetParameters()
{

    omega1 = defaultOmega1;
    omega2 = defaultOmega2;
    epsilon = defaultEpsilon;

    for( int i=0; i<NUM_COEFFS; i++ ) {
	a1[i] = defaultA1[i];
	a2[i] = defaultA2[i];
	b1[i] = defaultB1[i];
	b2[i] = defaultB2[i];
	r[i] = defaultR[i];
	s[i] = defaultS[i];
    }
    computeP1P2Arrays();
}




/******************************************************************************
Pick a random number between min and max.
******************************************************************************/
double 
TorusAttractor::frand(double min, double max)
{
#define  RAND_RANGE  100000    /* resolution of random numbers */
  int result;

  result = int(random() % RAND_RANGE);
  return (min + (max - min) * (result / (double) RAND_RANGE));
}




@


1.2
log
@precompute sine tables to speed attractor computation
@
text
@d36 2
d66 9
a74 7
  t = t - floor (t);
  if (t < 0)
    t += 1;

  p = p - floor (p);
  if (p < 0)
    p += 1;
d111 45
d219 1
@


1.1
log
@Initial revision
@
text
@d7 2
d30 1
a30 1
TorusAttractor::TorusAttractor()
d32 4
a52 1
  int i;
d56 2
a57 5
  p1 = p2 = 0;
  for (i = 0; i < NUM_COEFFS; i++) {
    p1 += a1[i] * sin (PI2 * (r[i] * theta + s[i] * psi + b1[i]));
    p2 += a2[i] * sin (PI2 * (r[i] * theta + s[i] * psi + b2[i]));
  }
d77 30
d146 1
d155 1
d168 1
@
