!0x000102EFFFF
 ! Generated by Silicon Graphic's RapidApp.
 !
 !
 ! RapidApp 1.1.
 !
module main_uil
version = 'V1.0'
names = case_sensitive
!(BX) bx_info("generate_vkapp_subclass", true )
!(BX) bx_info("generate_library", false )
!(BX) bx_info("vkapp_subclass_name", true )
!(BX) bx_info("library_header_directory", true )
!(BX) bx_info("library_name", true )
!(BX) bx_info("include_path", ".",
!(BX)		"/usr/include/Mrm",
!(BX)		"/usr/include/uil", false )
!(BX) bx_info("c_information", true )
!(BX) bx_info("app_class", "Application", true )
!(BX) bx_info("app_name", "application", true )
!(BX) bx_info("c++_pixmaps", "pixmaps.h", true )
!(BX) bx_info("c++_baseclass", "VkComponent", false )
!(BX) bx_info("c++_main", "main.C", true )
!(BX) bx_info("c++_makefile", "Makefile", true )
!(BX) bx_info("dont_merge_files", false )
!(BX) bx_info("verbose_codegen", true )
!(BX) bx_info("make_backups", true )
!(BX) bx_info("prune_dimensions", false )
!(BX) bx_info("use_ez", true )
!(BX) bx_info("no_standalone_classes", true )
!(BX) bx_info("generate_default_resources", true )
!(BX) bx_info("use_cvstatic", false )
!(BX) bx_info("use_runonce", false )
!(BX) bx_info("use_license", false )
!(BX) bx_info("use_inventor_loop", false )
!(BX) bx_info("use_pure_virtuals", false )
!(BX) bx_info("use_tooltalk", false )
!(BX) bx_info("uil_utilities", "bxutil-uil.c", true )
!(BX) bx_info("uil_constants", "main-uil.h", true )
!(BX) bx_info("uil_callbacks", "callbacks-uil.c", true )
!(BX) bx_info("uil_uil", "raTorus.uil", true )
!(BX) bx_info("uil_main", "main-uil.c", true )
!(BX) bx_info("uil_imakefile", "Imakefile", true )
!(BX) bx_info("uil_makefile", "makefile-uil", true )
!(BX) bx_info("c_utilities", "bxutil-c.c", true )
!(BX) bx_info("c_pixmaps", "pixmaps.h", true )
!(BX) bx_info("c_callbacks", "callbacks-c.c", true )
!(BX) bx_info("c_creation", "creation-c.c", true )
!(BX) bx_info("c_main", "main-c.c", true )
!(BX) bx_info("c_imakefile", "Imakefile", true )
!(BX) bx_info("c_makefile", "Makefile", true )
!(BX) bx_info("app_defaults", "app-defaults", true )
!(BX) bx_info("viewkit_code_version", "1.1" )


list BaseStyle : arguments {
};

list BaseStyleReasons : callbacks {
};


!(BX)object topLevelShell : TopLevelShell widget {
!(BX)    arguments {
!(BX)        XmNx = 29;
!(BX)        XmNy = 132;
!(BX)        XmNwidth = 500;
!(BX)        XmNheight = 529;
!(BX)    };
!(BX)    controls {
!(BX)       managed VkWindow vkwindow;
!(BX)    };
!(BX)    callbacks {
!(BX)    };
!(BX)};

object vkwindow : VkWindow widget {
    arguments {
        XmNforceChildClass = true;
        XmNautoRouteCallbacks = true;
        XmNwidth = 500;
        XmNheight = 529;
    };
    controls {
       managed XmMenuBar menuBar;
       managed XmBulletinBoard bulletinBoard;
    };
    callbacks {
    };
};

object menuBar : XmMenuBar widget {
    arguments {
        XmNmenuHelpWidget = XmCascadeButton helpPane;
        XmNwidth = 500;
        XmNheight = 28;
    };
    controls {
       managed XmCascadeButton helpPane;
    };
    callbacks {
    };
};

object helpPane : XmCascadeButton widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Help");
!(BX)   _XmNmnemonic = keysym("H");
        XmNwidth = 50;
        XmNheight = 24;
    };
    controls {
       unmanaged XmPulldownMenu pulldownMenu3;
    };
    callbacks {
    };
};

object pulldownMenu3 : XmPulldownMenu widget {
    arguments {
        XmNwidth = 235;
        XmNheight = 128;
    };
    controls {
       managed XmPushButtonGadget help_click_for_help;
       managed XmPushButtonGadget help_overview;
       managed XmPushButtonGadget help_index;
       managed XmPushButtonGadget help_keys_and_short;
       managed XmSeparatorGadget separator;
       managed XmPushButtonGadget help_prod_info;
    };
    callbacks {
    };
};

object help_click_for_help : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Click For Help");
!(BX)   _XmNmnemonic = keysym("C");
!(BX)   _XmNaccelerator = 'Shift<Key>F1';
!(BX)   _XmNacceleratorText = compound_string("Shift+F1");
    };
    controls {
    };
    callbacks {
    };
};

object help_overview : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Overview");
!(BX)   _XmNmnemonic = keysym("O");
    };
    controls {
    };
    callbacks {
    };
};

object help_index : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Index");
!(BX)   _XmNmnemonic = keysym("I");
    };
    controls {
    };
    callbacks {
    };
};

object help_keys_and_short : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Keys and Shortcuts");
!(BX)   _XmNmnemonic = keysym("K");
    };
    controls {
    };
    callbacks {
    };
};

object separator : XmSeparatorGadget widget {
    arguments {
    };
    controls {
    };
    callbacks {
    };
};

object help_prod_info : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Product Information");
!(BX)   _XmNmnemonic = keysym("P");
    };
    controls {
    };
    callbacks {
    };
};

object bulletinBoard : XmBulletinBoard widget {
    arguments {
        XmNresizePolicy = XmRESIZE_GROW;
        XmNwidth = 500;
        XmNheight = 501;
    };
    controls {
       managed XmOptionMenu numTorusTilesOptMenu1;
       managed XmLabel torusSizeLabel;
       managed XmLabel label8;
       managed XmLabel winSizeLabel;
       managed XmLabel label6;
       managed XmLabel estWorkLabel;
       managed XmLabel label4;
       managed XmSeparator separator3;
       managed XmOptionMenu sampSizeOptMenu;
       managed XmOptionMenu numTorusTilesOptMenu;
       managed XmLabel label3;
       managed XmSeparator separator2;
       managed XmTextField omegaSize;
       managed XmLabel label2;
       managed XmTextField omegaYPos;
       managed XmLabel label1;
       managed XmTextField omegaXPos;
       managed XmLabel label;
    };
    callbacks {
    };
};

object label : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Sampling Area in Omega Space");
        XmNx = 30;
        XmNy = 20;
        XmNwidth = 220;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object omegaXPos : XmTextField widget {
    arguments {
!(BX)   _XmNvalue = '';
        XmNx = 100;
        XmNy = 50;
        XmNwidth = 120;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setOmegaXPos();
    };
};

object label1 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Origin");
        XmNx = 20;
        XmNy = 50;
        XmNwidth = 48;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object omegaYPos : XmTextField widget {
    arguments {
        XmNx = 230;
        XmNy = 50;
        XmNwidth = 120;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setOmegaYPos();
    };
};

object label2 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Size");
        XmNx = 20;
        XmNy = 90;
        XmNwidth = 32;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object omegaSize : XmTextField widget {
    arguments {
        XmNx = 100;
        XmNy = 90;
        XmNwidth = 120;
        XmNheight = 30;
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setOmegaWindowSize();
    };
};

object separator2 : XmSeparator widget {
    arguments {
        XmNx = 20;
        XmNy = 120;
        XmNwidth = 480;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label3 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Display");
        XmNx = 20;
        XmNy = 160;
        XmNwidth = 56;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object numTorusTilesOptMenu : XmOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Number of Torus Tiles");
        XmNx = 20;
        XmNy = 200;
        XmNwidth = 249;
        XmNheight = 32;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown;
    };
    callbacks {
    };
};

object optionPulldown : XmPulldownMenu widget {
    arguments {
        XmNx = 220;
        XmNy = 393;
        XmNwidth = 55;
        XmNheight = 222;
    };
    controls {
       managed XmPushButtonGadget optionA;
       managed XmPushButtonGadget optionB;
       managed XmPushButtonGadget optionB1;
       managed XmPushButtonGadget optionB6;
       managed XmPushButtonGadget optionB2;
       managed XmPushButtonGadget optionB3;
       managed XmPushButtonGadget optionB4;
       managed XmPushButtonGadget optionB5;
       managed XmPushButtonGadget optionB7;
    };
    callbacks {
    };
};

object optionA : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("1");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize1();
    };
};

object optionB : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("2");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize2();
    };
};

object optionB1 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("4");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize4();
    };
};

object optionB6 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("8");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize8();
    };
};

object optionB2 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("16");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize16();
    };
};

object optionB3 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("32");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize32();
    };
};

object optionB4 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("64");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize64();
    };
};

object optionB5 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("128");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize128();
    };
};

object optionB7 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("256");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setSampleSize256();
    };
};

object sampSizeOptMenu : XmOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Sample Tile Size");
        XmNx = 20;
        XmNy = 230;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown1;
    };
    callbacks {
    };
};

object optionPulldown1 : XmPulldownMenu widget {
    arguments {
        XmNx = 0;
        XmNy = 0;
        XmNwidth = 55;
        XmNheight = 222;
    };
    controls {
       managed XmPushButtonGadget optionA1;
       managed XmPushButtonGadget optionB8;
       managed XmPushButtonGadget optionB9;
       managed XmPushButtonGadget optionB10;
       managed XmPushButtonGadget optionB11;
       managed XmPushButtonGadget optionB12;
       managed XmPushButtonGadget optionB13;
       managed XmPushButtonGadget optionB14;
       managed XmPushButtonGadget optionB15;
    };
    callbacks {
    };
};

object optionA1 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("1");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus1();
    };
};

object optionB8 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("2");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus2();
    };
};

object optionB9 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("4");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus4();
    };
};

object optionB10 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("8");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus8();
    };
};

object optionB11 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("16");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus16();
    };
};

object optionB12 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("32");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus32();
    };
};

object optionB13 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("64");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus64();
    };
};

object optionB14 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("128");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus128();
    };
};

object optionB15 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("256");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumTorus256();
    };
};

object separator3 : XmSeparator widget {
    arguments {
        XmNx = 10;
        XmNy = 270;
        XmNwidth = 477;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label4 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Work ~ ( # samples x sample tile size )^2 =");
        XmNx = 20;
        XmNy = 310;
        XmNwidth = 294;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object estWorkLabel : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("----");
        XmNx = 330;
        XmNy = 310;
        XmNwidth = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label6 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Window Size = # samples / sample tile size =");
        XmNx = 20;
        XmNy = 350;
        XmNwidth = 307;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object winSizeLabel : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("----");
        XmNx = 340;
        XmNy = 350;
        XmNwidth = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object label8 : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("Torus size = window size / number torus tiles = ");
        XmNx = 20;
        XmNy = 380;
        XmNwidth = 328;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object torusSizeLabel : XmLabel widget {
    arguments {
        XmNlabelType = XmSTRING;
!(BX)   _XmNlabelString = compound_string("----");
        XmNx = 360;
        XmNy = 370;
        XmNwidth = 40;
        XmNheight = 20;
    };
    controls {
    };
    callbacks {
    };
};

object numTorusTilesOptMenu1 : XmOptionMenu widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("Number of Samples");
        XmNx = 10;
        XmNy = 130;
        XmNwidth = 232;
        XmNheight = 32;
    };
    controls {
       unmanaged XmPulldownMenu optionPulldown2;
    };
    callbacks {
    };
};

object optionPulldown2 : XmPulldownMenu widget {
    arguments {
        XmNx = 193;
        XmNy = 323;
        XmNwidth = 55;
        XmNheight = 222;
    };
    controls {
       managed XmPushButtonGadget optionA2;
       managed XmPushButtonGadget optionB16;
       managed XmPushButtonGadget optionB17;
       managed XmPushButtonGadget optionB18;
       managed XmPushButtonGadget optionB19;
       managed XmPushButtonGadget optionB20;
       managed XmPushButtonGadget optionB21;
       managed XmPushButtonGadget optionB22;
       managed XmPushButtonGadget optionB23;
    };
    callbacks {
    };
};

object optionA2 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("1");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples1();
    };
};

object optionB16 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("2");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples2();
    };
};

object optionB17 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("4");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples4();
    };
};

object optionB18 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("8");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples8();
    };
};

object optionB19 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("16");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples16();
    };
};

object optionB20 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("32");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples32();
    };
};

object optionB21 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("64");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples64();
    };
};

object optionB22 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("128");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples128();
    };
};

object optionB23 : XmPushButtonGadget widget {
    arguments {
!(BX)   _XmNlabelString = compound_string("256");
    };
    controls {
    };
    callbacks {
        XmNactivateCallback = procedure setNumSamples256();
    };
};
end module;
