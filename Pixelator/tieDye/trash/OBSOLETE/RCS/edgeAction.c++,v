head	1.5;
access;
symbols;
locks; strict;


1.5
date	94.02.05.23.20.44;	author robert;	state Exp;
branches;
next	1.4;

1.4
date	94.01.28.21.09.46;	author robert;	state Exp;
branches;
next	1.3;

1.3
date	93.12.28.00.55.58;	author robert;	state Exp;
branches;
next	1.2;

1.2
date	93.02.12.14.01.40;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	93.01.14.13.01.33;	author robert;	state Exp;
branches;
next	;


desc
@increase weight of neighbors sharing an edge with this cell
@


1.5
log
@remove hardwiring of selectStates
@
text
@//
//   eat an image away based on different rules, and different seed points
//

#include	"edgeAction.h"


void
edgeAction::makeNbors()
{
    setNumNbors( 4 );
    setConstWgts();
    int	*edge = nbors;
	edge[0] = -1;	edge[1] = 0;	edge += 2;
	edge[0] = +1;	edge[1] = 0;	edge += 2;
	edge[0] = 0;	edge[1] = -1;	edge += 2;
	edge[0] = 0;	edge[1] = +1;	edge += 2;
}

@


1.4
log
@replace addState with hard-coded selectStates
@
text
@a10 2
    // addState = csWaiting;
    selectStates = int(csWaiting|csEmpty);
@


1.3
log
@generalize action class to precompute affected neighbors and weights
@
text
@d11 2
a12 1
    addState = csWaiting;
@


1.2
log
@interface with the weight class to provide arbitrary weighting functions.
@
text
@a7 3
//
//  XXX does not use correct relative weight coordinates
//
d9 1
a9 1
edgeAction::doAction( cellArray *cells, int index[] )
d11 8
a18 12
	//
	//  every neighbor sharing an edge now gets greater weight
	//
	int	edge[2];
	edge[0] = index[0]-1;	edge[1] = index[1];
		cells->add( edge, wgt->getWgt( nDim, edge, edge ) );
	edge[0] = index[0]+1;	edge[1] = index[1];
		cells->add( edge, wgt->getWgt( nDim, edge, edge ) );
	edge[0] = index[0];	edge[1] = index[1]-1;
		cells->add( edge, wgt->getWgt( nDim, edge, edge ) );
	edge[0] = index[0];	edge[1] = index[1]+1;
		cells->add( edge, wgt->getWgt( nDim, edge, edge ) );
a19 2


@


1.1
log
@Initial revision
@
text
@d8 3
d19 1
a19 1
		cells->add( edge, weight );
d21 1
a21 1
		cells->add( edge, weight );
d23 1
a23 1
		cells->add( edge, weight );
d25 1
a25 1
		cells->add( edge, weight );
@
